<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

  <link rel="stylesheet" href="theme.css" />

  {{!-- Syntax highlight: PrismJS --}}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/themes/prism.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/themes/prism-okaidia.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/plugins/line-numbers/prism-line-numbers.css">

  <title>{{ title }}</title>
</head>
<body class="line-numbers">{{!-- Syntax highlight with line numbers --}}

  {{!-- Sidebar --}}
  <aside>
    {{#each sidebar}}
      <div class="section{{#if sections}} current{{/if}}">
        <div class="info">
          <div class="thumbnail" style="background-image: url({{filename}}.png);">
            <div class="ifont ifont-lrn_icon_finish"></div>
          </div>
          <div class="data">
            <small>Tutorial</small>
            <a href="{{filename}}.html">{{title}}</a>
          </div>
        </div>
          <ul>
          {{#if sections}}
            {{#each sections}}
              <li><a href="#{{id}}"><span class="num">{{num}}</span>{{title}}</a></li>
            {{/each}}
          {{/if}}
          </ul>
      </div>
    {{/each}}
  </aside>

  <main id="summary">
    <div class="progress-bar-container">
      <div class="progress"></div>
    </div>

    <header style="background-image: url({{filename}}.png)">
      <div class="backdrop">
        {{!-- <img src="{{filename}}.png" /> --}}
      </div>
    </header>

    {{#each sections}}
    <section class="{{#if @first}} summary {{else}} step {{/if}}">
      <div class="centered-content">
        {{#if @first}}
        <div>
          <img src="{{../filename}}.png" width="200" />
        </div>
        {{/if}}

        {{{ rendered }}}

        {{#unless @first}}
        <input type="checkbox" id="complete-{{ id }}" />
        <div>
          <label class="button" for="complete-{{ id }}">
            <span class="unchecked">Mark step as completed <div class="ifont ifont-lrn_icon_finish"></div></span>
            <span class="checked">Mark step as incomplete</span>
          </label>

          <div class="completion ifont ifont-lrn_icon_finish"></div>
        </div>
        {{/unless}}
      </div>
    </section>

    {{!-- add separator between each step/section --}}
    {{#unless @first}}
      {{#unless @last}}
        <div class="step-separator"></div>
      {{/unless}}
    {{/unless}}

    {{/each}}

    <div class="step-separator"></div>

    <section class="step final">
      <div class="centered-content">
        {{!-- TODO: Use different wording here --}}
        <p><small>You've made it!</small></p>

        <h2>{{title}}</h2>

        {{#if next}}
          <a href="{{next}}.html" class="button">Mark all complete and continue <div class="ifont ifont-lrn_icon_finish"></div></a>
          <p><a href="{{next}}.html" class="button incomplete">Continue without marking complete</a></p>
        {{else}}
          <p>üëèüëèüëè</p>
        {{/if}}
      </div>
    </section>

  </main>

  <a href="#summary" class="back-to-top">
    <div class="ifont ifont-icons-jump-to-top"></div>
  </a>

  {{!-- Syntax highlight --}}
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/components/prism-core.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/plugins/autoloader/prism-autoloader.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/plugins/line-numbers/prism-line-numbers.js"></script>

  <script type="text/javascript">
    //
    // Scroll to top
    //
    const backToTopEl = document.querySelector(".back-to-top");
    backToTopEl.addEventListener("click", (e) => {
      e.preventDefault();
      window.scrollTo({ top: 0, left: 0, behavior: 'smooth' });
    });

    //
    // Step completion: Scroll animation for next step
    //
    const main = document.querySelector('main');
    const stepSections = document.querySelectorAll('.step');
    const sidebarItems = document.querySelectorAll('aside ul li');
    const sidebarSections = document.querySelectorAll('aside .section');
    const completionCheckboxes = document.querySelectorAll('.step input[type="checkbox"]');
    const currentSidebarSection = Array.from(sidebarSections).findIndex((section) => section.classList.contains("current"));

    const completionCacheKey = "{{filename}}";
    let cachedCompletionStatus = JSON.parse(localStorage.getItem(completionCacheKey) || "{}");
    const cacheCompletion = () => {
      const previousCompletionStatus = cachedCompletionStatus.completed;
      cachedCompletionStatus.completed = Array.from(sidebarItems).every((_, i) => cachedCompletionStatus[i])
      if (previousCompletionStatus !== cachedCompletionStatus.completed) {
        if (cachedCompletionStatus.completed) {
          sidebarSections[currentSidebarSection].classList.add("complete");
        } else {
          sidebarSections[currentSidebarSection].classList.remove("complete");
        }
      }
      localStorage.setItem(completionCacheKey, JSON.stringify(cachedCompletionStatus));
    };

    completionCheckboxes.forEach((checkbox, i) => {
      // Flag sidebar as checked
      checkbox.addEventListener("change", (event) => {
        if (checkbox.checked) {
          sidebarItems[i].classList.add("completed");

        } else {
          sidebarItems[i].classList.remove("completed");
        }
      });

      // Initial checked state from cached value
      if (cachedCompletionStatus[i]) {
        checkbox.checked = true;
        checkbox.dispatchEvent(new Event("change"));
      }

      checkbox.addEventListener("change", (event) => {
        const checked = checkbox.checked;

        cachedCompletionStatus[i] = checked;
        cacheCompletion();

        const nextSection = stepSections[i + 1];
        if (checked && nextSection) {
          debugger;
          window.scrollTo({
            top: nextSection.offsetTop - 50,
            left: 0,
            behavior: 'smooth'
          });
        }
      });

      //
      // Mark all as complete & continue
      //
      const markAllCompleteButton = document.querySelector('.step.final .button');
      if (markAllCompleteButton) {
        markAllCompleteButton.addEventListener("click", (event) => {
          completionCheckboxes.forEach((checkbox) => {
            checkbox.checked = true;
            checkbox.dispatchEvent(new Event("change"));
          });
        });
      }
    });

    //
    // TODO: CONFETTI ANIMATION WHEN LAST STEP IS COMPLETE
    // <script src="https://cdnjs.cloudflare.com/ajax/libs/canvas-confetti/1.4.0/confetti.js">
    //
    // const button = document.querySelector(".my-button")
    // button.addEventListener("click", () => confetti(button))


    //
    // TODO / IDEA: automatically scroll to the last unfinished step.
    //

    //
    // check for previously completed sections on the sidebar
    //
    {{#each sidebar}}
      if (JSON.parse(localStorage.getItem("{{filename}}") || "{}").completed) {
        sidebarSections[{{@index}}].classList.add("complete");
      }
    {{/each}}

    // Reading progress/scroll
    const progressBarEl = document.querySelector(".progress-bar-container .progress");
    const startScrollY = stepSections[0].getBoundingClientRect().top + window.scrollY - 100;

    // Only calculate content height after DOM content is fully loaded.
    let contentHeight = 0;
    document.addEventListener("DOMContentLoaded", () => {
      stepSections.forEach((stepSection) => contentHeight += stepSection.scrollHeight);
    });
    contentHeight -= 300;

    const onResize = (event) => {
      const mainBoundingRect = main.getBoundingClientRect();
      const progressBarContainer = document.querySelector(".progress-bar-container");
      progressBarContainer.style.left = `${mainBoundingRect.x}px`;
      progressBarContainer.style.width = `${mainBoundingRect.width}px`;
    };
    window.addEventListener("resize", onResize);
    onResize();

    window.addEventListener("scroll", function () {
      const scrollY = window.scrollY;
      if (scrollY >= startScrollY) {
        document.body.classList.add("in-content");

      } else {
        document.body.classList.remove("in-content");
      }

      // get current scroll position
      const scrollPosition = Math.max(0, scrollY - startScrollY);

      // get scroll percentage and set width of progress bar
      const scrollPercentage = (scrollPosition / contentHeight) * 100;
      progressBarEl.style.width = scrollPercentage + "%";
    });



  </script>

</body>
</html>