<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

  <link rel="stylesheet" href="theme.css" />

  {{!-- Syntax highlight: PrismJS --}}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/themes/prism.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/themes/prism-okaidia.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/plugins/line-numbers/prism-line-numbers.css">

  <title>{{ title }}</title>

  <script type="text/javascript">
    // modified version of dom-confetti.
    // (adds initialPosition to physics/config option)
    const defaultColors = ["#a864fd", "#29cdff", "#78ff44", "#ff718d", "#fdff6a"];
    function createElements(root, elementCount, colors, width, height) { return Array.from({ length: elementCount }).map((_, index) => { const element = document.createElement("div"); const color = colors[index % colors.length]; element.style["background-color"] = color; element.style.width = width; element.style.height = height; element.style.position = "absolute"; element.style.willChange = "transform, opacity"; element.style.visibility = "hidden"; root.appendChild(element); return element; }); }
    function randomPhysics(initialPosition, angle, spread, startVelocity, random) { const radAngle = angle * (Math.PI / 180); const radSpread = spread * (Math.PI / 180); return { x: initialPosition.x, y: initialPosition.y, z: initialPosition.z, wobble: random() * 10, wobbleSpeed: 0.1 + random() * 0.1, velocity: startVelocity * 0.5 + random() * startVelocity, angle2D: -radAngle + (0.5 * radSpread - random() * radSpread), angle3D: -(Math.PI / 4) + random() * (Math.PI / 2), tiltAngle: random() * Math.PI, tiltAngleSpeed: 0.1 + random() * 0.3 }; }
    function updateFetti(fetti, progress, dragFriction, decay) { fetti.physics.x += Math.cos(fetti.physics.angle2D) * fetti.physics.velocity; fetti.physics.y += Math.sin(fetti.physics.angle2D) * fetti.physics.velocity; fetti.physics.z += Math.sin(fetti.physics.angle3D) * fetti.physics.velocity; fetti.physics.wobble += fetti.physics.wobbleSpeed; if (decay) { fetti.physics.velocity *= decay; } else { fetti.physics.velocity -= fetti.physics.velocity * dragFriction; } fetti.physics.y += 3; fetti.physics.tiltAngle += fetti.physics.tiltAngleSpeed; const { x, y, z, tiltAngle, wobble } = fetti.physics; const wobbleX = x + 10 * Math.cos(wobble); const wobbleY = y + 10 * Math.sin(wobble); const transform = `translate3d(${wobbleX}px, ${wobbleY}px, ${z}px) rotate3d(1, 1, 1, ${tiltAngle}rad)`; fetti.element.style.visibility = "visible"; fetti.element.style.transform = transform; fetti.element.style.opacity = 1 - progress; }
    function animate(root, fettis, dragFriction, decay, duration, stagger) { let startTime; return new Promise(resolve => { function update(time) { if (!startTime) startTime = time; const elapsed = time - startTime; const progress = startTime === time ? 0 : (time - startTime) / duration; fettis.slice(0, Math.ceil(elapsed / stagger)).forEach(fetti => { updateFetti(fetti, progress, dragFriction, decay); }); if (time - startTime < duration) { requestAnimationFrame(update); } else { fettis.forEach(fetti => { if (fetti.element.parentNode === root) { return root.removeChild(fetti.element); } }); resolve(); } } requestAnimationFrame(update); }); }

    const defaults = { angle: 90, spread: 45, startVelocity: 45, elementCount: 50, width: "10px", height: "10px", perspective: "", colors: defaultColors, duration: 3000, stagger: 0, dragFriction: 0.1, random: Math.random, initialPosition: { x: 0, y: 0, z: 0 }, };
    function backwardPatch(config) { if (!config.stagger && config.delay) { config.stagger = config.delay; } return config; }
    function confetti(root, config = {}) { const { elementCount, colors, width, height, perspective, angle, spread, startVelocity, decay, dragFriction, duration, stagger, random, initialPosition, } = Object.assign({}, defaults, backwardPatch(config)); root.style.perspective = perspective; const elements = createElements(root, elementCount, colors, width, height); const fettis = elements.map(element => ({ element, physics: randomPhysics(initialPosition, angle, spread, startVelocity, random) })); return animate(root, fettis, dragFriction, decay, duration, stagger); }
  </script>

</head>
<body class="line-numbers has-preview-{{hasPreviewImage}} is-overview-{{isOverview}}">{{!-- Syntax highlight with line numbers --}}

  {{!-- Sidebar --}}
  <aside>
    {{#each sidebar}}
      <div class="section{{#if sections}} current{{/if}} is-overview-{{isOverview}}">
        <div class="info">
          <div class="thumbnail" {{#if hasPreviewImage}} style="background-image: url({{filename}}.png); background-color: transparent;" {{/if}}>
            <div class="ifont ifont-lrn_icon_finish"></div>
          </div>
          <div class="data">
            <small>
              {{#if isOverview}} Project {{else}} Tutorial {{/if}}
            </small>
            <a href="{{filename}}.html">{{title}}</a>
          </div>
        </div>
          {{#unless isOverview}}
            <ul>
            {{#if sections}}
              {{#each sections}}
                <li><a href="#{{id}}"><span class="num">{{num}}</span>{{title}}</a></li>
              {{/each}}
            {{/if}}
            </ul>
          {{/unless}}
      </div>
    {{/each}}
  </aside>

  <main id="summary">
    <div class="progress-bar-container">
      <div class="progress"></div>
    </div>

    <header {{#if hasPreviewImage}}style="background-image: url({{filename}}.png)"{{/if}}>
      <div class="backdrop">
        {{!-- <img src="{{filename}}.png" /> --}}
      </div>
    </header>

    {{#unless isOverview}}
      {{!-- ------------- --}}
      {{!-- Article pages --}}
      {{!-- ------------- --}}

      {{#each sections}}
        <section class="{{#if @first}} summary {{else}} step {{/if}}">
          <div class="centered-content">
            {{#if @first}}
            <div class="summary-header">
              {{#if ../hasPreviewImage}}
                <img src="{{../filename}}.png" />
              {{/if}}
              <small><span class="ifont ifont-filled-time"></span> {{wordCountToMinutes ../wordCount}}</small>
            </div>
            {{/if}}

            {{{ rendered }}}

            {{#unless @first}}
            <input type="checkbox" id="complete-{{ id }}" />
            <div>
              <label class="button" for="complete-{{ id }}">
                <span class="unchecked">Mark step as completed <div class="ifont ifont-lrn_icon_finish"></div></span>
                <span class="checked">Mark step as incomplete</span>
              </label>

              <div class="completion ifont ifont-lrn_icon_finish"></div>
            </div>
            {{/unless}}
          </div>
        </section>

        {{!-- add separator between each step/section --}}
        {{#unless @first}}
          {{#unless @last}}
            <div class="step-separator"></div>
          {{/unless}}
        {{/unless}}

      {{/each}}

      <div class="step-separator"></div>

      <section class="step final">
        <div class="centered-content">
          <p><small>Finished {{current.num}} of {{current.total}}:</small></p>
          <h3>{{title}}</h3>

          {{!-- TODO: Use different wording here --}}
          {{#if next}}
            <p><small>Next:</small></p>
            <h3>{{next.num}}. {{next.title}}</h3>
          {{else}}
            <p><small>Congratulations, you've made it!</small></p>
          {{/if}}

          {{#if next}}
            <a href="{{next.filename}}.html" class="button">Mark all complete and continue <div class="ifont ifont-lrn_icon_finish"></div></a>
            <p><a href="{{next.filename}}.html" class="button incomplete">Continue without marking complete</a></p>
          {{else}}
            <p>üëèüëèüëè</p>
          {{/if}}
        </div>
      </section>

    {{else}}
      {{!-- -------------- --}}
      {{!-- Index/Overview --}}
      {{!-- -------------- --}}

      <section class="summary">
        <div class="centered-content">
          <div class="summary-header">
            {{#if sections.[0].hasPreviewImage}}
              <img src="{{filename}}.png" />
            {{/if}}
            <small><span class="ifont ifont-filled-time"></span> {{wordCountToMinutes wordCount}}</small>
          </div>

          {{{ rendered }}}
        </div>

        {{{ sections.[0].rendered }}}
      </section>

      <ul>
      {{#each sidebar}}
        {{#unless isOverview}}
        <li>
          <a href="#">
            <div class="thumbnail" style="{{#if hasPreviewImage}} background-image: url({{filename}}.png) {{/if}}">
            </div>
            <span class="data">
              <h3>{{title}}</h3>
              <p>
                <small><span class="ifont ifont-filled-time"></span> {{wordCountToMinutes wordCount}}</small>
                ‚Ä¢
                <small><span class="ifont ifont-filled-time"></span> {{num}}/{{../current.total}}</small>
              </p>
            </span>
          </a>
        </li>
        {{/unless}}
      {{/each}}
      </ul>

    {{/unless}}

  </main>

  <a href="#summary" class="back-to-top">
    <div class="ifont ifont-icons-jump-to-top"></div>
  </a>

  {{!-- Syntax highlight --}}
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/components/prism-core.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/plugins/autoloader/prism-autoloader.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/plugins/line-numbers/prism-line-numbers.js"></script>

  <script type="text/javascript">
    //
    // Scroll to top
    //
    const backToTopEl = document.querySelector(".back-to-top");
    backToTopEl.addEventListener("click", (e) => {
      e.preventDefault();
      window.scrollTo({ top: 0, left: 0, behavior: 'smooth' });
    });

    //
    // Step completion: Scroll animation for next step
    //
    const main = document.querySelector('main');
    const stepSections = document.querySelectorAll('.step');
    const sidebarItems = document.querySelectorAll('aside ul li');
    const sidebarSections = document.querySelectorAll('aside .section');
    const completionCheckboxes = document.querySelectorAll('.step input[type="checkbox"]');
    const currentSidebarSection = Array.from(sidebarSections).findIndex((section) => section.classList.contains("current"));

    let allowScroll = true; // FIXME: this is too ugly...

    const completionCacheKey = "{{filename}}";
    let cachedCompletionStatus = JSON.parse(localStorage.getItem(completionCacheKey) || "{}");
    const isAllComplete = () => Array.from(sidebarItems).every((_, i) => cachedCompletionStatus[i]);
    const cacheCompletion = () => {
      const previousCompletionStatus = cachedCompletionStatus.completed;
      cachedCompletionStatus.completed = isAllComplete();
      if (previousCompletionStatus !== cachedCompletionStatus.completed) {
        if (cachedCompletionStatus.completed) {
          sidebarSections[currentSidebarSection].classList.add("complete");
        } else {
          sidebarSections[currentSidebarSection].classList.remove("complete");
        }
      }
      localStorage.setItem(completionCacheKey, JSON.stringify(cachedCompletionStatus));
    };

    completionCheckboxes.forEach((checkbox, i) => {
      // Flag sidebar as checked
      checkbox.addEventListener("change", (event) => {
        if (checkbox.checked) {
          sidebarItems[i].classList.add("completed");

        } else {
          sidebarItems[i].classList.remove("completed");
        }
      });

      // Initial checked state from cached value
      if (cachedCompletionStatus[i]) {
        checkbox.checked = true;
        checkbox.dispatchEvent(new Event("change"));
      }

      checkbox.addEventListener("change", (event) => {
        const checked = checkbox.checked;

        cachedCompletionStatus[i] = checked;
        cacheCompletion();

        // if all are complete, trigger confetti animation
        if (isAllComplete()) {
          const button = stepSections[i].querySelector(".button");
          confetti(button, {
            initialPosition: {
              x: button.offsetWidth / 2,
              y: 0,
              z: 0,
            }
          });
          return;
        }

        // query for a next step/section that is not yet complete
        const nextSection = Array
          .from(stepSections)
          .find((section, j) => {
            return (
              (j > i) &&
              !stepSections[j].querySelector('input[type="checkbox"]:checked')
            );
          });
        if (allowScroll && checked && nextSection) {
          window.scrollTo({
            top: nextSection.offsetTop - 50,
            left: 0,
            behavior: 'smooth'
          });
        }
      });

      //
      // Mark all as complete & continue
      //
      const markAllCompleteButton = document.querySelector('.step.final .button');
      if (markAllCompleteButton) {
        markAllCompleteButton.addEventListener("click", (event) => {
          allowScroll = false;
          completionCheckboxes.forEach((checkbox) => {
            if (!checkbox.checked) {
              checkbox.checked = true;
              checkbox.dispatchEvent(new Event("change"));
            }
          });
        });
      }
    });

    //
    // TODO: CONFETTI ANIMATION WHEN LAST STEP IS COMPLETE
    // <script src="https://cdnjs.cloudflare.com/ajax/libs/canvas-confetti/1.4.0/confetti.js">
    //
    // const button = document.querySelector(".my-button")
    // button.addEventListener("click", () => confetti(button))


    //
    // TODO / IDEA: automatically scroll to the last unfinished step.
    //

    //
    // check for previously completed sections on the sidebar
    //
    {{#each sidebar}}
      if (JSON.parse(localStorage.getItem("{{filename}}") || "{}").completed) {
        sidebarSections[{{@index}}].classList.add("complete");
      }
    {{/each}}

    // Reading progress/scroll
    const progressBarEl = document.querySelector(".progress-bar-container .progress");
    const startScrollY = stepSections[0].getBoundingClientRect().top + window.scrollY - 100; // `window.scrollY` here is to compensate if page starts with scrollY > 0

    // Only calculate content height after DOM content is fully loaded.
    let contentHeight = 0;
    document.addEventListener("DOMContentLoaded", () => {
      stepSections.forEach((stepSection, i) => {
        // ignore last section
        if (i === stepSections.length - 1) { return; }
        contentHeight += stepSection.scrollHeight;
      });
    });
    contentHeight -= 300;

    const onResize = (event) => {
      const mainBoundingRect = main.getBoundingClientRect();
      const progressBarContainer = document.querySelector(".progress-bar-container");
      progressBarContainer.style.left = `${mainBoundingRect.x}px`;
      progressBarContainer.style.width = `${mainBoundingRect.width}px`;
    };
    window.addEventListener("resize", onResize);
    onResize();

    window.addEventListener("scroll", function () {
      const scrollY = window.scrollY;
      if (scrollY >= startScrollY) {
        document.body.classList.add("in-content");

      } else {
        document.body.classList.remove("in-content");
      }

      // get current scroll position
      const scrollPosition = Math.max(0, scrollY - startScrollY);

      // get scroll percentage and set width of progress bar
      const scrollPercentage = (scrollPosition / contentHeight) * 100;
      progressBarEl.style.width = scrollPercentage + "%";
    });

  </script>

</body>
</html>